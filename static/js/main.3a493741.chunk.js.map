{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","id","name","email","className","alt","src","Cradlist","robots","map","user","i","key","searchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","SearchBox","Cardlist","Component","connect","dispatch","payload","Boolean","window","location","hostname","match","initialSate","store","createStore","action","Object","assign","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yRA0CeA,EArBF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MAExB,OAEC,yBAAKC,UAAY,uDAEjB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBAGrB,6BAEA,gCAAMC,EAAN,KACA,+BAAKC,EAAL,QCYaI,EAxCE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OAEA,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACvB,OACE,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAQM,EAAOG,GAAGT,KACnBC,MAASK,EAAOG,GAAGR,aCKbU,EAhBG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OAEC,yBAAKX,UAAY,OAGhB,2BAAOA,UAAY,mCACnBY,KAAK,SAASC,YAAY,gBAAgBC,SAAYH,MCU1CI,EAjBA,SAACC,GAEf,OAEC,yBAAKC,MAAQ,CAAEC,UAAW,SAAWC,OAAS,mBAAoBC,OAAQ,UAIzEJ,EAAMK,WCcFC,G,wDAEN,aAAe,IAAD,8BAEb,gBAmBFC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACf,YAAcc,EAAME,OAAOC,SApBzC,EAAKC,MAAQ,CACTxB,OAAQ,GACRM,YAAc,IALL,E,gEAWK,IAAD,OAElBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAK,EAAKR,SAAS,CAACrB,OAAS6B,S,+BAU9B,IAAD,EAGqBC,KAAKN,MAA5BxB,EAHE,EAGFA,OAAQM,EAHN,EAGMA,YAGTyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACrC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS7B,EAAY4B,kBAGrD,OAAMlC,EAAOoC,OAKX,yBAAKxC,UAAY,MAChB,wBAAIA,UAAW,MAAf,2BACA,kBAACyC,EAAD,CAAW9B,aAAgBuB,KAAKX,iBAChC,kBAAC,EAAD,KACA,kBAACmB,EAAD,CAAUtC,OAAQ+B,MARb,wBAAInC,UAAY,MAAhB,uB,GAvCW2C,cA+DJC,eA5EO,SAAAhB,GACtB,MAAO,CACNlB,YAAakB,EAAMlB,gBAKM,SAACmC,GACzB,MAAM,CACLtB,eAAgB,SAACC,GAAD,OAAWqB,ECrBU,CAExCjC,KCLkC,qBDMlCkC,QDkBsDtB,EAAME,OAAOC,YAmEpDiB,CAA4CtB,GG/ExCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdN,IAAMC,EAAc,CACnB1C,YAAa,ICSR2C,G,MAAQC,aDLc,WAAsC,IAArC1B,EAAoC,uDAA5BwB,EAAaG,EAAe,uDAAP,GACzD,OAAOA,EAAO3C,MACb,IFXiC,qBEYhC,OAAO4C,OAAOC,OAAO,GAAG7B,EAAO,CAAClB,YAAY6C,EAAOT,UACpD,QACC,OAAOlB,OCEV8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEA,kBAAC,IAAD,CAAUP,MAAOA,GAEhB,kBAAC,EAAD,QAKDQ,SAASC,eAAe,SFyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a493741.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n// class Card extends React.Component{\r\n// \trender(){\r\n// \t\treturn(\r\n\t\t\t\r\n// \t\t\t<div>\r\n\r\n// \t\t\t<h1> Hello </h1>\r\n\r\n// \t\t\t</div>\r\n\r\n\r\n\r\n// \t\t\t)\r\n// \t}\r\n// }\r\n\r\n\r\n\r\nconst Card = ({id, name, email}) =>{\r\n\r\n\treturn(\r\n\r\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\r\n\r\n\t\t<div>\r\n\r\n\t\t<h4> {name} </h4>\r\n\t\t<p> {email} </p>\r\n\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\n\r\nconst Cradlist = ({robots}) => {\r\n\r\n\treturn (\r\n\r\n\t<div>\r\n        {\r\n        \trobots.map((user, i) => {\r\n\t\t\t\treturn(\r\n\t\t\t\t \t<Card \r\n\t\t\t\t      key={i} \r\n\t\t\t\t      id={robots[i].id} \r\n\t\t\t\t      name = {robots[i].name} \r\n\t\t\t\t     email = {robots[i].email}/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\r\n        }\r\n    </div>\r\n\r\n\t\t)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Cradlist;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\nconst searchBox = ({searchField, searchChange}) => {\r\n\treturn (\r\n\r\n\t\t<div className = 'pa3'>\r\n\r\n\r\n\t\t\t<input className = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='Search' placeholder='Search Robots' onChange = {searchChange} />\r\n\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n}\r\n\r\n\r\nexport default searchBox;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div style ={{ overflowY: 'scroll' , border : ' 1px solid black', height: '800px'}}>\r\n\r\n\r\n\r\n\t\t{props.children}\r\n\r\n\r\n\r\n\t\t</div>\r\n\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nimport './App.css'\r\n\r\n\r\nimport {setSearchField} from '../actions'\r\n\r\n \r\nconst mapSateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchField\r\n\t}\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return{\r\n   \tonSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n\t}\r\n}\r\n\r\nclass  App extends  Component {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t     robots: [] ,\r\n\t     searchField : ''\r\n        }\r\n\r\n\t}\r\n\r\n\r\ncomponentDidMount(){\r\n\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\r\n\t.then(users =>  this.setState({robots : users}))\r\n\r\n\t\r\n}\r\n\r\nonSearchChange = (event) => {\r\n\r\n\tthis.setState({searchField:  event.target.value});\r\n\r\n}\r\n\trender() {\r\n\r\n\r\n\tconst {robots, searchField} = this.state;\r\n\r\n\r\n\tconst filteredRobots = robots.filter(robot => {\r\n\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t})\r\n\r\n\tif ( !robots.length){\r\n\t\treturn <h2 className = 'tc'> L O A D I N G </h2>\r\n\t}else {\r\n\r\n\t\t\treturn(\r\n\t\t\t<div className = 'tc'>\r\n\t\t\t\t<h2 className ='f1'> R o b o F r i e n d s </h2>\r\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<Cardlist robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t);\r\n\r\n\t  } \r\n    } \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default  connect(mapSateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD} from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload : text\r\n\r\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD} from './constants';\r\n\r\n\r\n\r\nconst initialSate = {\r\n\tsearchField: '',\r\n\r\n}\r\n\r\nexport const searchRobots = (state = initialSate, action ={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({},state, {searchField:action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';  \nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots} from './reducer';\n\nimport 'tachyons';\n\n\n\n\nconst store = createStore(searchRobots)\n\nReactDOM.render(\n  <React.StrictMode>\n\n  <Provider store={store}>\n\n  \t<App/>\n\n  </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}